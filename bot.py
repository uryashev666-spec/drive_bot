import asyncio
import json
import logging
from datetime import datetime, timedelta, date
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

TOKEN = "7818982442:AAGY-DDMsuvhLg0-Ec1ds43SkAmCltR88cI"
DATA_FILE = "data.json"
TELEGRAM_LINK = "https://t.me/sv010ch"
logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher()
user_context = {}  # user_id -> {"date": ..., "time": ...}

def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {"schedule": []}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_user_week_records(schedule, user_id):
    result = []
    now = datetime.now()
    for item in schedule:
        if item.get("user_id") == user_id:
            try:
                date_obj = datetime.strptime(item.get("date"), "%d.%m.%Y")
                if 0 <= (now - date_obj).days < 7:
                    result.append(item)
            except Exception:
                continue
    return result

def get_next_weekdays(count=10):
    weekdays_ru = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞"]
    days = []
    current = date.today() + timedelta(days=1)
    while len(days) < count:
        if current.weekday() < 5:
            day_name = weekdays_ru[current.weekday()]
            days.append(f"{day_name}, {current.strftime('%d.%m.%Y')}")
        current += timedelta(days=1)
    return days

@dp.message(Command("start"))
async def start(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="view_schedule")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="add_record")],
            [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É", url=TELEGRAM_LINK)]
        ]
    )
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∞–≤—Ç–æ–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ.",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )

@dp.callback_query(F.data == "view_schedule")
async def view_schedule(callback: types.CallbackQuery):
    data = load_data()
    if not data["schedule"]:
        await callback.message.answer("üì≠ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –ø—É—Å—Ç–æ–µ.")
    else:
        text = "\n".join([
            f'‚Ä¢ {item["date"]}, {item["time"]}, {item.get("name", "")} {item.get("surname", "")}, {item.get("address", "")}' +
            (" [–û—Ç–º–µ–Ω–∞]" if item.get("status") == "–æ—Ç–º–µ–Ω–µ–Ω–æ" else "")
            for item in data["schedule"]
        ])
        await callback.message.answer(f"üìÖ –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n{text}")
    await callback.answer()

@dp.callback_query(F.data == "add_record")
async def add_record(callback: types.CallbackQuery):
    days = get_next_weekdays(10)
    keyboard = InlineKeyboardBuilder()
    for day in days:
        keyboard.button(text=day, callback_data=f"select_day:{day}")
    keyboard.adjust(1)
    await callback.message.answer("üìÖ –í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –¥–ª—è –∑–∞–ø–∏—Å–∏:", reply_markup=keyboard.as_markup())
    await callback.answer()

@dp.callback_query(F.data.startswith("select_day:"))
async def handle_day_selection(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    selected_day = callback.data.split(":", 1)[1]
    user_context[user_id] = {"date": selected_day}

    times = ["8:00", "9:20", "10:40", "12:50", "14:10", "15:30"]
    keyboard = InlineKeyboardBuilder()
    for t in times:
        keyboard.button(text=t, callback_data=f"select_time:{t}")
    keyboard.adjust(2)
    await callback.message.answer(f"üïí –í—ã–±—Ä–∞–Ω –¥–µ–Ω—å: {selected_day}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è:", reply_markup=keyboard.as_markup())
    await callback.answer()

@dp.callback_query(F.data.startswith("select_time:"))
async def handle_time_selection(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    selected_time = callback.data.split(":", 1)[1]
    if user_id not in user_context:
        await callback.message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å.")
        await callback.answer()
        return
    user_context[user_id]["time"] = selected_time

    async def final_step(message: types.Message):
        await unregister_save_record(user_id)
        data = load_data()
        try:
            parts = [s.strip() for s in message.text.split(',', 2)]
            if len(parts) != 3:
                raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
            name, surname, address = parts
            date_s = user_context[user_id]["date"].split(", ")[1]
            time_s = user_context[user_id]["time"]

            count = len(get_user_week_records(data["schedule"], user_id))
            if count >= 2:
                await message.answer("‚ùå –ó–∞ –æ–¥–Ω—É –Ω–µ–¥–µ–ª—é –Ω–µ–ª—å–∑—è –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –±–æ–ª–µ–µ 2 —Ä–∞–∑.")
                return

            for item in data["schedule"]:
                if item["date"] == date_s and item["time"] == time_s and item.get("status") != "–æ—Ç–º–µ–Ω–µ–Ω–æ":
                    await message.answer("‚ùå –≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.")
                    return

            data["schedule"].append({
                "date": date_s,
                "time": time_s,
                "name": name,
                "surname": surname,
                "address": address,
                "user_id": user_id
            })
            save_data(data)
            await message.answer("‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!")
        except ValueError as ve:
            await message.answer(f"‚ùó {ve}")
        except Exception:
            await message.answer("‚ùó –§–æ—Ä–º–∞—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ –ø—Ä–∏–º–µ—Ä—É.")

    dp.message.register(final_step, F.from_user.id == user_id)
    await callback.message.answer("üë§ –í–≤–µ–¥–∏ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –∞–¥—Ä–µ—Å (–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω, –ò–≤–∞–Ω–æ–≤, —É–ª. –õ–µ–Ω–∏–Ω–∞ 5)")
    await callback.answer()

async def unregister_save_record(user_id):
    # –±–µ–∑–æ–ø–∞—Å–Ω–æ —Å–Ω–∏–º–∞–µ–º –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        dp.message.unregister_all(F.from_user.id == user_id)
    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π")
    user_context.pop(user_id, None)

@dp.message(Command("cancel"))
async def cancel(message: types.Message):
    data = load_data()
    try:
        parts = message.text.split(' ', 4)
        if len(parts) != 5:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
        _, date_s, time_s, name, surname = parts
        found = None
        for item in data["schedule"]:
            if (
                item["date"] == date_s and
                item["time"] == time_s and
                item["name"] == name and
                item["surname"] == surname
            ):
                found = item
                break
        if not found:
            await message.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        user_id = found.get("user_id")
        if user_id is not None:
            try:
                await bot.send_message(
                    user_id,
                    "‚ö†Ô∏è –ó–∞–Ω—è—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º –≤ —Å–≤—è–∑–∏ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å—é."
                )
            except Exception:
                logging.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        found["status"] = "–æ—Ç–º–µ–Ω–µ–Ω–æ"
        save_data(data)
        await message.answer("‚õî –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—á–µ–Ω–∏–∫—É. –°–ª–æ—Ç –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∑–∞–Ω—è—Ç—ã–º.")
    except ValueError as ve:
        await message.answer(f"‚ùó {ve}")
    except Exception:
        await message.answer("‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü—Ä–∏–º–µ—Ä: /cancel 12.10.2025 14:00 –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤")

@dp.message(Command("day"))
async def view_day_records(message: types.Message):
    try:
        parts = message.text.split(" ", 1)
        if len(parts) != 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        date_s = parts[1].strip()
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã (DD.MM.YYYY)
        datetime.strptime(date_s, "%d.%m.%Y")

        data = load_data()
        records = [item for item in data["schedule"] if item["date"] == date_s]
        if not records:
            await message.answer(f"üì≠ –ù–∞ {date_s} –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.")
            return

        text = "\n".join([
            f'‚Ä¢ {item["time"]}, {item.get("name", "")} {item.get("surname", "")}, {item.get("address", "")}' +
            (" [–û—Ç–º–µ–Ω–∞]" if item.get("status") == "–æ—Ç–º–µ–Ω–µ–Ω–æ" else "")
            for item in records
        ])
        await message.answer(f"üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ {date_s}:\n\n{text}")
    except ValueError:
        await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /day 12.10.2025")
    except Exception:
        await message.answer("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
