import asyncio
import json
import logging
import os
import sys
import aiohttp
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command

TOKEN = "7818982442:AAGY-DDMsuvhLg0-Ec1ds43SkAmCltR88cI"
YOUR_TELEGRAM_ID = 487289287
DATA_FILE = "data.json"
USERS_FILE = "users_info.json"
TELEGRAM_LINK = "https://t.me/sv010ch"
GITHUB_RAW_URL = "https://raw.githubusercontent.com/uryashev666-spec/drive_bot/main/bot.py"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
user_context = {}

main_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÖ –ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
        [KeyboardButton(text="‚úèÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")],
        [KeyboardButton(text="üí¨ –ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {"schedule": []}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def load_users_info():
    try:
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}

def save_users_info(info):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(info, f, ensure_ascii=False, indent=2)

users_info = load_users_info()

def get_workdays(count=10):
    weekdays_ru = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞"]
    today = datetime.today()
    days = []
    current = today
    while len(days) < count:
        if current.weekday() < 5:
            days.append((weekdays_ru[current.weekday()], current.strftime("%d.%m.%Y")))
        current += timedelta(days=1)
    return days

def get_times():
    return ["08:00", "09:20", "10:40", "12:50", "14:10", "15:30"]

def safe_datetime(date_s, time_s):
    try:
        return datetime.strptime(f"{date_s} {time_s}", "%d.%m.%Y %H:%M")
    except Exception:
        return None

def week_limit(user_id, new_date):
    data = load_data()
    new_dt = datetime.strptime(new_date, "%d.%m.%Y")
    week_dates = [(new_dt + timedelta(days=i)).strftime("%d.%m.%Y") for i in range(-6, 1)]
    return sum(
        1 for item in data["schedule"]
        if item.get("user_id") == user_id
        and item.get("date") in week_dates
        and item.get("status") != "–æ—Ç–º–µ–Ω–µ–Ω–æ"
    )

@dp.message(Command("start"))
async def start(message: types.Message):
    buttons = [
        [InlineKeyboardButton(text="üìÖ –ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="view_schedule")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="add_record")],
        [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É", url=TELEGRAM_LINK)]
    ]
    if message.from_user.id == YOUR_TELEGRAM_ID:
        buttons.insert(0, [InlineKeyboardButton(text="üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∞–≤—Ç–æ–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞. –ú–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ.",
        reply_markup=main_menu_kb
    )
    await message.answer("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=keyboard)

@dp.message()
async def handler_menu_and_input(message: types.Message):
    text = message.text.strip()
    if text == "üìÖ –ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        await view_schedule(types.CallbackQuery(message=message, from_user=message.from_user))
        return
    elif text == "‚úèÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è":
        await add_record(types.CallbackQuery(message=message, from_user=message.from_user))
        return
    elif text == "üí¨ –ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä":
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É: " + TELEGRAM_LINK)
        return
    # –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ: –§–ò–û, –∞–¥—Ä–µ—Å, —Å—Ç–∞—Ä—ã–π –≤–≤–æ–¥
    await process_name_or_address(message)

@dp.callback_query(F.data == "add_record")
async def add_record(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_context[user_id] = {}
    data = load_data()
    builder = []
    for day_name, day_date in get_workdays(10):
        busy = any(item["date"] == day_date and item["user_id"] == user_id and item.get("status") != "–æ—Ç–º–µ–Ω–µ–Ω–æ"
                   for item in data["schedule"])
        text = f"üö´ {day_name}, {day_date}" if busy else f"{day_name}, {day_date}"
        cdata = "user_busy_day" if busy else f"select_day:{day_date}"
        builder.append([InlineKeyboardButton(text=text, callback_data=cdata)])
    keyboard = InlineKeyboardMarkup(inline_keyboard=builder)
    await callback.message.answer("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data == "user_busy_day")
async def user_busy_day(callback: types.CallbackQuery):
    await callback.message.answer("–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –≤—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã! –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å.")
    await callback.answer()

@dp.callback_query(F.data.startswith("select_day:"))
async def select_time(callback: types.CallbackQuery):
    day_date = callback.data.split(":")[1]
    user_id = callback.from_user.id
    week_count = week_limit(user_id, day_date)
    if week_count >= 2:
        await callback.message.answer("–õ–∏–º–∏—Ç: –Ω–µ –±–æ–ª–µ–µ –¥–≤—É—Ö –∑–∞–Ω—è—Ç–∏–π –¥–ª—è —É—á–µ–Ω–∏–∫–∞ –∑–∞ –ª—é–±—ã–µ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥.")
        await callback.answer()
        return
    user_context[user_id] = {"date": day_date}
    data = load_data()
    builder = []
    for t in get_times():
        busy = any(item["date"] == day_date and item["time"] == t and item.get("status") != "–æ—Ç–º–µ–Ω–µ–Ω–æ"
                   for item in data["schedule"])
        text = f"‚ùå {t}" if busy else t
        cdata = "busy" if busy else f"select_time:{t}"
        builder.append([InlineKeyboardButton(text=text, callback_data=cdata)])
    keyboard = InlineKeyboardMarkup(inline_keyboard=builder)
    await callback.message.answer(f"üïí –î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞: {day_date}
–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è:", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data == "busy")
async def busy_time(callback: types.CallbackQuery):
    await callback.message.answer("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ.")
    await callback.answer()

@dp.callback_query(F.data.startswith("select_time:"))
async def select_time_write_name(callback: types.CallbackQuery):
    selected_time = callback.data[len('select_time:'):].strip()
    user_id = callback.from_user.id
    if user_id not in user_context:
        user_context[user_id] = {}
    if selected_time not in get_times():
        await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –û–±–Ω–æ–≤–∏—Ç–µ –º–µ–Ω—é!")
        return
    user_context[user_id]["time"] = selected_time
    if str(user_id) in users_info:
        ctx = user_context[user_id]
        ctx["surname"] = users_info[str(user_id)]["surname"]
        ctx["name"] = users_info[str(user_id)]["name"]
        user_context[user_id] = ctx
        await callback.message.answer("üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, –∫—É–¥–∞ –ø–æ–¥—ä–µ—Ö–∞—Ç—å:")
    else:
        await callback.message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω)")
    await callback.answer()

async def process_name_or_address(message: types.Message):
    user_id = message.from_user.id
    ctx = user_context.get(user_id, {})
    if ctx.get("date") and ctx.get("time") and "name" not in ctx:
        parts = message.text.strip().split(" ", 1)
        if len(parts) < 2:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
            return
        ctx["surname"], ctx["name"] = parts[0], parts[1]
        users_info[str(user_id)] = {"surname": ctx["surname"], "name": ctx["name"]}
        save_users_info(users_info)
        user_context[user_id] = ctx
        await message.answer("üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, –∫—É–¥–∞ –ø–æ–¥—ä–µ—Ö–∞—Ç—å:")
        return
    if ctx.get("date") and ctx.get("time") and ctx.get("name") and "address" not in ctx:
        ctx["address"] = message.text.strip()
        user_context[user_id] = ctx
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="confirm_record")]
        ])
        await message.answer(
           f"–ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞ {ctx['date']} {ctx['time']}
–§–ò–û: {ctx['surname']} {ctx['name']}
–ê–¥—Ä–µ—Å: {ctx['address']}
–ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å¬ª.",
           reply_markup=kb)
        return

@dp.callback_query(F.data == "confirm_record")
async def confirm_record(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    ctx = user_context.get(user_id, {})
    if not (ctx.get("date") and ctx.get("time") and ctx.get("name") and ctx.get("address")):
        await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏.", reply_markup=main_menu_kb)
        await callback.answer()
        return
    week_count = week_limit(user_id, ctx["date"])
    if week_count >= 2:
        await callback.message.answer("–õ–∏–º–∏—Ç: –Ω–µ –±–æ–ª–µ–µ –¥–≤—É—Ö –∑–∞–Ω—è—Ç–∏–π –¥–ª—è —É—á–µ–Ω–∏–∫–∞ –∑–∞ –ª—é–±—ã–µ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥.", reply_markup=main_menu_kb)
        await callback.answer()
        return
    data = load_data()
    data["schedule"].append({
        "date": ctx["date"],
        "time": ctx["time"],
        "name": ctx["name"],
        "surname": ctx["surname"],
        "address": ctx["address"],
        "user_id": user_id
    })
    save_data(data)
    card_text = (
        f"üöó <b>–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!</b>
"
        f"–î–∞—Ç–∞: <b>{ctx['date']}</b>
"
        f"–í—Ä–µ–º—è: <b>{ctx['time']}</b>
"
        f"–§–ò–û: <b>{ctx['surname']} {ctx['name']}</b>
"
        f"–ê–¥—Ä–µ—Å: <b>{ctx['address']}</b>"
    )
    try:
        await bot.send_message(YOUR_TELEGRAM_ID, card_text, parse_mode="HTML")
    except Exception:
        pass
    await callback.message.answer("‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", reply_markup=main_menu_kb)
    user_context.pop(user_id, None)
    await start(callback.message)
    await callback.answer()

@dp.callback_query(F.data == "view_schedule")
async def view_schedule(callback: types.CallbackQuery):
    data = load_data()
    now = datetime.now()
    my_id = callback.from_user.id
    my_records = [
        item for item in data["schedule"]
        if item.get("user_id") == my_id and item.get("status") != "–æ—Ç–º–µ–Ω–µ–Ω–æ"
           and safe_datetime(item['date'], item['time']) and safe_datetime(item['date'], item['time']) > now
    ]
    my_records.sort(key=lambda item: safe_datetime(item['date'], item['time']) or datetime.max)
    text = ""
    builder = []
    for idx, item in enumerate(my_records):
        text += f"üü¢ –ú–æ—è –∑–∞–ø–∏—Å—å {idx+1}:
–î–∞—Ç–∞: {item['date']}
–í—Ä–µ–º—è: {item['time']}
–ê–¥—Ä–µ—Å: {item['address']}
"
        builder.append([InlineKeyboardButton(
            text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å {item['date']} {item['time']}",
            callback_data=f"user_cancel:{item['date']}:{item['time']}"
        )])
    if not text:
        text = "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    keyboard = InlineKeyboardMarkup(inline_keyboard=builder)
    await callback.message.answer(text, reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data.startswith("user_cancel:"))
async def user_cancel(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    prefix = "user_cancel:"
    rest = callback.data[len(prefix):]
    date_s, time_s = rest.split(":", 1)
    data = load_data()
    found = next((item for item in data["schedule"] if
                  item["date"]==date_s and item["time"]==time_s and item.get("user_id")==user_id and item.get("status")!="–æ—Ç–º–µ–Ω–µ–Ω–æ"), None)
    if not found:
        await callback.message.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu_kb)
        await callback.answer()
        return
    found["status"] = "–æ—Ç–º–µ–Ω–µ–Ω–æ"
    save_data(data)
    await callback.message.answer(f"‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å {date_s} {time_s} –æ—Ç–º–µ–Ω–µ–Ω–∞! –í—Å–µ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–≤–æ–±–æ–¥–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.", reply_markup=main_menu_kb)
    all_users = set(item["user_id"] for item in data["schedule"]) | {user_id}
    for uid in all_users:
        if uid != user_id:
            try:
                await bot.send_message(
                    uid,
                    f"üîî –û—Å–≤–æ–±–æ–¥–∏–ª–æ—Å—å –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π!
–î–∞—Ç–∞: {date_s}
–í—Ä–µ–º—è: {time_s}
–ú–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è!"
                )
            except Exception:
                pass
    await start(callback.message)
    await callback.answer()

# -------- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø–æ –≤–∞—à–µ–º—É –æ—Ä–∏–≥–∏–Ω–∞–ª—É --------
@dp.callback_query(F.data == "admin_panel")
async def admin_panel(callback: types.CallbackQuery):
    if callback.from_user.id != YOUR_TELEGRAM_ID:
        await callback.message.answer('‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!', reply_markup=main_menu_kb)
        await callback.answer()
        return
    data = load_data()
    now = datetime.now()
    user_slots = [
        item for item in data["schedule"]
        if item.get("status") != "–æ—Ç–º–µ–Ω–µ–Ω–æ"
           and safe_datetime(item["date"], item["time"])
           and safe_datetime(item["date"], item["time"]) > now
    ]
    await callback.message.answer("<b>–ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è–º–∏</b>", parse_mode="HTML", reply_markup=main_menu_kb)
    for idx, slot in enumerate(user_slots, 1):
        day = slot["date"]
        time = slot["time"]
        uid = slot["user_id"]
        name = slot.get("surname", "") + " " + slot.get("name", "")
        address = slot.get("address", "")
        text = f"{idx}. {day} {time} ‚Äî {name}, {address}"
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Å–≤–æ–±–æ–¥–∏—Ç—å", callback_data=f"admin_cancel_slot:{day}:{time}:{uid}:free"),
             InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data=f"admin_cancel_slot:{day}:{time}:{uid}:nofree")]
        ])
        await callback.message.answer(text, reply_markup=kb)
    upcoming_days = sorted(set(slot["date"] for slot in user_slots))
    if upcoming_days:
        kb_days = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"‚ùå –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è –Ω–∞ {day}", callback_data=f"admin_cancel_day_close:{day}")]
                for day in upcoming_days
            ]
        )
        await callback.message.answer("–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –∑–∞–Ω—è—Ç–∏–π –Ω–∞ –¥–µ–Ω—å:", reply_markup=kb_days)
    await callback.answer()

@dp.callback_query(F.data.startswith("admin_cancel_slot:"))
async def admin_cancel_slot(callback: types.CallbackQuery):
    prefix = "admin_cancel_slot:"
    rest = callback.data[len(prefix):]
    parts = rest.rsplit(":", 2)
    day_time = parts[0]
    cancel_id = parts[1]
    cancel_type = parts[2]
    day, slot_time = day_time.split(":", 1)
    slot_time = slot_time.strip()
    data = load_data()
    slot = next((item for item in data["schedule"] if item["date"] == day and item["time"].strip() == slot_time and str(item["user_id"]) == cancel_id and item.get("status") != "–æ—Ç–º–µ–Ω–µ–Ω–æ"), None)
    if not slot:
        await callback.message.answer("–°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu_kb)
        await callback.answer()
        return
    slot["status"] = "–æ—Ç–º–µ–Ω–µ–Ω–æ"
    save_data(data)
    try:
        if cancel_type == "free":
            await bot.send_message(int(cancel_id), f"‚õî –í–∞—à–µ –∑–∞–Ω—è—Ç–∏–µ {day} {slot_time} –æ—Ç–º–µ–Ω–µ–Ω–æ, —Å–ª–æ—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω –¥–ª—è –¥—Ä—É–≥–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤.")
            await callback.message.answer("–°–ª–æ—Ç –æ—Ç–º–µ–Ω—ë–Ω –∏ –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω (—Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥—Ä—É–≥–∏–º).", reply_markup=main_menu_kb)
        else:
            await bot.send_message(int(cancel_id), f"‚õî –ó–∞–Ω—è—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –≤ —Å–≤—è–∑–∏ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å—é")
            await callback.message.answer("–°–ª–æ—Ç –æ—Ç–º–µ–Ω—ë–Ω –∏ –∑–∞–∫—Ä—ã—Ç (–¥–ª—è –¥—Ä—É–≥–∏—Ö –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω).", reply_markup=main_menu_kb)
    except Exception:
        pass
    await callback.answer()

@dp.callback_query(F.data.startswith("admin_cancel_day_close:"))
async def admin_cancel_day_close(callback: types.CallbackQuery):
    _, day = callback.data.split(":")
    data = load_data()
    cancelled = 0
    for slot in data["schedule"]:
        if slot.get("date") == day and slot.get("status") != "–æ—Ç–º–µ–Ω–µ–Ω–æ":
            slot["status"] = "–æ—Ç–º–µ–Ω–µ–Ω–æ"
            cancelled += 1
            try:
                await bot.send_message(
                    slot["user_id"],
                    "‚õî –ó–∞–Ω—è—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –≤ —Å–≤—è–∑–∏ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å—é"
                )
            except Exception:
                pass
    save_data(data)
    await callback.message.answer(f"‚ùå –í—Å–µ –∑–∞–Ω—è—Ç–∏—è –Ω–∞ {day} –æ—Ç–º–µ–Ω–µ–Ω—ã –∏ —Å–ª–æ—Ç—ã –∑–∞–∫—Ä—ã—Ç—ã. –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {cancelled} —É—á–µ–Ω–∏–∫–∞–º.", reply_markup=main_menu_kb)
    await callback.answer()


async def auto_update_code():
    current_file = sys.argv[0]
    last_hash = None
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å GitHub –∞–∫—Ç–∏–≤–Ω–∞!")
    while True:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(GITHUB_RAW_URL) as resp:
                    if resp.status == 200:
                        remote_code = await resp.text()
                        remote_hash = hash(remote_code)
                        if last_hash is None:
                            last_hash = remote_hash
                        elif remote_hash != last_hash:
                            print("‚ùó–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –Ω–∞ GitHub!")
                            with open(current_file, "w", encoding="utf-8") as f:
                                f.write(remote_code)
                            print("–ö–æ–¥ –æ–±–Ω–æ–≤–ª—ë–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
                            os.execv(sys.executable, [sys.executable] + sys.argv)
                            return
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", e)
        await asyncio.sleep(60)

async def send_reminders():
    while True:
        now = datetime.now()
        data = load_data()
        for item in data["schedule"]:
            if item.get("status") == "–æ—Ç–º–µ–Ω–µ–Ω–æ":
                continue
            session_time = safe_datetime(item["date"], item["time"])
            if session_time:
                if abs((session_time - now).total_seconds() - 86400) < 60:
                    try:
                        await bot.send_message(
                            item["user_id"],
                            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–Ω—è—Ç–∏–µ –∑–∞–≤—Ç—Ä–∞ –≤ {item['time']} ({item['date']})"
                        )
                    except Exception:
                        pass
                if 0 < (session_time - now).total_seconds() <= 1200:
                    try:
                        await bot.send_message(
                            item["user_id"],
                            f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–Ω—è—Ç–∏–µ —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç!"
                        )
                    except Exception:
                        pass
        await asyncio.sleep(60)

async def main():
    print("–ë–æ—Ç —Å—Ç–∞—Ä—Ç—É–µ—Ç.")
    asyncio.create_task(send_reminders())
    asyncio.create_task(auto_update_code())
    await dp.start_polling(bot)

if __name__ == "__main__":
    print("=== –ù–æ–≤—ã–π –∑–∞–ø—É—Å–∫ DRIVE_BOT ===")
    asyncio.run(main())