import asyncio
import json
import logging
import os
import sys
import aiohttp
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
TOKEN = "7818982442:AAGY-DDMsuvhLg0-Ec1ds43SkAmCltR88cI"
YOUR_TELEGRAM_ID = 487289287
DATA_FILE = "data.json"
USERS_FILE = "users_info.json"
TELEGRAM_LINK = "https://t.me/sv010ch"
GITHUB_RAW_URL = "https://raw.githubusercontent.com/uryashev666-spec/drive_bot/main/bot.py"
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
user_context = {}
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (ReplyKeyboardMarkup)
def build_main_menu(user_id: int) -> ReplyKeyboardMarkup:
    keyboard = [
        [KeyboardButton(text="üìÖ –ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
        [KeyboardButton(text="‚úèÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")],
        [KeyboardButton(text="üí¨ –ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä")]
    ]
    if user_id == YOUR_TELEGRAM_ID:
        keyboard.insert(0, [KeyboardButton(text="üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=False)

def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {"schedule": []}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def load_users_info():
    try:
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}

def save_users_info(info):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(info, f, ensure_ascii=False, indent=2)

users_info = load_users_info()

def get_workdays(count=10):
    weekdays_ru = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞"]
    today = datetime.today()
    days = []
    current = today
    while len(days) < count:
        if current.weekday() < 5:
            days.append((weekdays_ru[current.weekday()], current.strftime("%d.%m.%Y")))
        current += timedelta(days=1)
    return days

def get_times():
    return ["08:00", "09:20", "10:40", "12:50", "14:10", "15:30"]

def safe_datetime(date_s, time_s):
    try:
        return datetime.strptime(f"{date_s} {time_s}", "%d.%m.%Y %H:%M")
    except Exception:
        return None

def week_limit(user_id, new_date):
    data = load_data()
    new_dt = datetime.strptime(new_date, "%d.%m.%Y")
    week_dates = [(new_dt + timedelta(days=i)).strftime("%d.%m.%Y") for i in range(-6, 1)]
    return sum(
        1 for item in data["schedule"]
        if item.get("user_id") == user_id
        and item.get("date") in week_dates
        and item.get("status") != "–æ—Ç–º–µ–Ω–µ–Ω–æ"
    )

async def send_user_schedule(message: types.Message, user_id: int):
    data = load_data()
    now = datetime.now()
    my_records = [
        item for item in data["schedule"]
        if item.get("user_id") == user_id and item.get("status") != "–æ—Ç–º–µ–Ω–µ–Ω–æ"
           and safe_datetime(item['date'], item['time']) and safe_datetime(item['date'], item['time']) > now
    ]
    my_records.sort(key=lambda item: safe_datetime(item['date'], item['time']) or datetime.max)
    text = ""
    # –£–±–∏—Ä–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    for idx, item in enumerate(my_records):
        text += f"üü¢ –ú–æ—è –∑–∞–ø–∏—Å—å {idx+1}:\n–î–∞—Ç–∞: {item['date']}\n–í—Ä–µ–º—è: {item['time']}\n–ê–¥—Ä–µ—Å: {item['address']}\n"
    if not text:
        text = "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    await message.answer(text)

async def start_add_record_flow(message: types.Message):
    user_id = message.from_user.id
    user_context[user_id] = {}
    data = load_data()
    # –£–±–∏—Ä–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–Ω—è: –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é
    available = []
    for day_name, day_date in get_workdays(10):
        week_count = week_limit(user_id, day_date)
        if week_count >= 2:
            status = "(–ª–∏–º–∏—Ç)"
        else:
            busy = any(item["date"] == day_date and item["user_id"] == user_id and item.get("status") != "–æ—Ç–º–µ–Ω–µ–Ω–æ" for item in data["schedule"])
            status = "(–∑–∞–Ω—è—Ç–æ –≤–∞–º–∏)" if busy else ""
        available.append(f"- {day_name}, {day_date} {status}".strip())
    await message.answer("üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–Ω–∏:\n" + "\n".join(available) + "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

@dp.message(Command("start"))
async def start(message: types.Message):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ ReplyKeyboard, –±–µ–∑ inline-–∫–Ω–æ–ø–æ–∫
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∞–≤—Ç–æ–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞. –ú–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ.",
        reply_markup=build_main_menu(message.from_user.id)
    )

@dp.message()
async def handler_menu_and_input(message: types.Message):
    text = message.text.strip()
    if text == "üìÖ –ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        await send_user_schedule(message, message.from_user.id)
        return
    elif text == "‚úèÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è":
        await start_add_record_flow(message)
        return
    elif text == "üí¨ –ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä":
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É: " + TELEGRAM_LINK)
        return
    elif text == "üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" and message.from_user.id == YOUR_TELEGRAM_ID:
        # –•—É–∫ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (–¥–æ–±–∞–≤—å—Ç–µ –Ω—É–∂–Ω—É—é –ª–æ–≥–∏–∫—É)
        await message.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –∑–¥–µ—Å—å.")
        return
    await process_name_or_address(message)

# –£–¥–∞–ª—è–µ–º –≤—Å–µ callback_query –∏ inline-–≤–µ—Ç–∫–∏, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –¥–∏–∞–ª–æ–≥–æ–≤—ã–π –≤–≤–æ–¥
# –î–∞–ª–µ–µ –æ—Å—Ç–∞–≤—à–∞—è—Å—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –Ω–æ –±–µ–∑ inline-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π

async def process_name_or_address(message: types.Message):
    user_id = message.from_user.id
    ctx = user_context.get(user_id, {})
    if ctx.get("date") and ctx.get("time") and "name" not in ctx:
        parts = message.text.strip().split(" ", 1)
        if len(parts) < 2:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
            return
        ctx["surname"], ctx["name"] = parts[0], parts[1]
        users_info[str(user_id)] = {"surname": ctx["surname"], "name": ctx["name"]}
        save_users_info(users_info)
        user_context[user_id] = ctx
        await message.answer("üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, –∫—É–¥–∞ –ø–æ–¥—ä–µ—Ö–∞—Ç—å:")
        return
    if ctx.get("date") and ctx.get("time") and ctx.get("name") and "address" not in ctx:
        ctx["address"] = message.text.strip()
        user_context[user_id] = ctx
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
        info = users_info.get(str(user_id), {})
        info["surname"] = ctx["surname"]
        info["name"] = ctx["name"]
        info["address"] = ctx["address"]
        users_info[str(user_id)] = info
        save_users_info(users_info)
        await message.answer(
            f"–ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞ {ctx['date']} {ctx['time']}\n–§–ò–û: {ctx['surname']} {ctx['name']}\n–ê–¥—Ä–µ—Å: {ctx['address']}\n–ù–∞–ø–∏—à–∏—Ç–µ '–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã
    if text := message.text.strip().lower():
        if text == "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" and all(k in ctx for k in ("date", "time", "name", "surname", "address")):
            week_count = week_limit(user_id, ctx["date"])
            if week_count >= 2:
                await message.answer("–õ–∏–º–∏—Ç: –Ω–µ –±–æ–ª–µ–µ –¥–≤—É—Ö –∑–∞–Ω—è—Ç–∏–π –¥–ª—è —É—á–µ–Ω–∏–∫–∞ –∑–∞ —Å–µ–º—å –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥.")
                return
            data = load_data()
            data["schedule"].append({
                "date": ctx["date"],
                "time": ctx["time"],
                "name": ctx["name"],
                "surname": ctx["surname"],
                "address": ctx["address"],
                "user_id": user_id
            })
            save_data(data)
            card_text = (
                f"üöó –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!\n"
                f"–î–∞—Ç–∞: {ctx['date']}\n"
                f"–í—Ä–µ–º—è: {ctx['time']}\n"
                f"–§–ò–û: {ctx['surname']} {ctx['name']}\n"
                f"–ê–¥—Ä–µ—Å: {ctx['address']}"
            )
            try:
                await bot.send_message(YOUR_TELEGRAM_ID, card_text, parse_mode="HTML")
            except Exception:
                pass
            await message.answer("‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            user_context.pop(user_id, None)
            await start(message)
            return
        if text == "–æ—Ç–º–µ–Ω–∞":
            user_context.pop(user_id, None)
            await message.answer("‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return

# –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
async def auto_update_code():
    current_file = sys.argv[0]
    last_hash = None
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å GitHub –∞–∫—Ç–∏–≤–Ω–∞!")
    while True:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(GITHUB_RAW_URL) as resp:
                    if resp.status == 200:
                        remote_code = await resp.text()
                        remote_hash = hash(remote_code)
                        if last_hash is None:
                            last_hash = remote_hash
                        elif remote_hash != last_hash:
                            print("‚ùó–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –Ω–∞ GitHub!")
                            with open(current_file, "w", encoding="utf-8") as f:
                                f.write(remote_code)
                            print("–ö–æ–¥ –æ–±–Ω–æ–≤–ª—ë–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
                            os.execv(sys.executable, [sys.executable] + sys.argv)
                            return
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", e)
        await asyncio.sleep(60)

async def send_reminders():
    while True:
        now = datetime.now()
        data = load_data()
        for item in data["schedule"]:
            if item.get("status") == "–æ—Ç–º–µ–Ω–µ–Ω–æ":
                continue
            session_time = safe_datetime(item["date"], item["time"])
            if session_time:
                if abs((session_time - now).total_seconds() - 86400) < 60:
                    try:
                        await bot.send_message(
                            item["user_id"],
                            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–Ω—è—Ç–∏–µ –∑–∞–≤—Ç—Ä–∞ –≤ {item['time']} ({item['date']})"
                        )
                    except Exception:
                        pass
                if 0 < (session_time - now).total_seconds() <= 1200:
                    try:
                        await bot.send_message(
                            item["user_id"],
                            f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–Ω—è—Ç–∏–µ —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç!"
                        )
                    except Exception:
                        pass
        await asyncio.sleep(60)

async def main():
    print("–ë–æ—Ç —Å—Ç–∞—Ä—Ç—É–µ—Ç.")
    asyncio.create_task(send_reminders())
    asyncio.create_task(auto_update_code())
    await dp.start_polling(bot)

if __name__ == "__main__":
    print("=== –ù–æ–≤—ã–π –∑–∞–ø—É—Å–∫ DRIVE_BOT ===")
    asyncio.run(main())
