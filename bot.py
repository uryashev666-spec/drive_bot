import asyncio
import json
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

TOKEN = "7818982442:AAGY-DDMsuvhLg0-Ec1ds43SkAmCltR88cI"
DATA_FILE = "data.json"
TELEGRAM_LINK = "https://t.me/sv010ch"
YOUR_TELEGRAM_ID = 487289287

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
user_message_handlers = {}

def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {"schedule": []}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_user_week_records(schedule, user_id):
    result = []
    now = datetime.now()
    for item in schedule:
        if item.get("user_id") == user_id:
            try:
                date = datetime.strptime(item.get("date"), "%d.%m.%Y")
                if 0 <= (now - date).days < 7:
                    result.append(item)
            except Exception:
                pass
    return result

def get_save_record_handler(user_id):
    if user_id not in user_message_handlers:
        async def specific_save_record(message: types.Message):
            await save_record_logic(message, user_id)
        user_message_handlers[user_id] = specific_save_record
    return user_message_handlers[user_id]

async def unregister_save_record(user_id):
    handler = user_message_handlers.get(user_id)
    if handler:
        dp.message.unregister(handler, F.from_user.id == user_id)
        del user_message_handlers[user_id]

@dp.message(Command("start"))
async def start(message: types.Message):
    buttons = [
        [InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="view_schedule")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="add_record")],
        [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É", url=TELEGRAM_LINK)]
    ]
    if message.from_user.id == YOUR_TELEGRAM_ID:
        buttons.insert(0, [InlineKeyboardButton(text="üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∞–≤—Ç–æ–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ.",
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "admin_panel")
async def admin_panel_button(callback: types.CallbackQuery):
    await admin_panel(callback.message)
    await callback.answer()

@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    if message.from_user.id != YOUR_TELEGRAM_ID:
        await message.answer('‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!')
        return
    data = load_data()
    now = datetime.now()
    all_records = [
        item for item in data["schedule"]
        if item.get("status") != "–æ—Ç–º–µ–Ω–µ–Ω–æ"
        and datetime.strptime(f"{item['date']} {item['time']}", "%d.%m.%Y %H:%M") > now
    ]
    all_records.sort(key=lambda item: datetime.strptime(f"{item['date']} {item['time']}", "%d.%m.%Y %H:%M"))
    text = "üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n"
    builder = InlineKeyboardBuilder()
    for idx, item in enumerate(all_records):
        text += (
            f"\nüîπ {idx+1}. –î–∞—Ç–∞: {item['date']} –í—Ä–µ–º—è: {item['time']}\n"
            f"–§–∞–º–∏–ª–∏—è: {item.get('surname','')}\n–ò–º—è: {item.get('name','')}\n–ê–¥—Ä–µ—Å: {item.get('address','')}\n"
            f"ID —É—á–µ–Ω–∏–∫–∞: {item['user_id']}\n"
        )
        builder.button(
            text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å {item['date']} {item['time']} [{item['user_id']}]",
            callback_data=f"admin_cancel:{item['date']}:{item['time']}:{item['user_id']}"
        )
    builder.adjust(1)
    await message.answer(text, reply_markup=builder.as_markup())

@dp.callback_query(F.data.startswith("admin_cancel:"))
async def admin_cancel(callback: types.CallbackQuery):
    if callback.from_user.id != YOUR_TELEGRAM_ID:
        await callback.message.answer("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        await callback.answer()
        return
    _, date_s, time_s, target_id = callback.data.split(":", 3)
    data = load_data()
    found = next((item for item in data["schedule"]
                  if item["date"]==date_s and item["time"]==time_s and str(item["user_id"])==str(target_id) and item.get("status")!="–æ—Ç–º–µ–Ω–µ–Ω–æ"), None)
    if not found:
        await callback.message.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await callback.answer()
        return
    found["status"] = "–æ—Ç–º–µ–Ω–µ–Ω–æ"
    save_data(data)
    await callback.message.answer(f"‚úÖ –ó–∞–ø–∏—Å—å {date_s} {time_s} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} –æ—Ç–º–µ–Ω–µ–Ω–∞!")
    try:
        await bot.send_message(int(target_id),
            f"‚ö†Ô∏è –í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ {date_s} {time_s} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except Exception:
        pass
    await callback.answer()

@dp.callback_query(F.data == "view_schedule")
async def view_schedule(callback: types.CallbackQuery):
    data = load_data()
    if not data["schedule"]:
        await callback.message.answer("üì≠ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –ø—É—Å—Ç–æ–µ.")
    else:
        text = "\n".join([
            f'‚Ä¢ {item["date"]}, {item["time"]}, {item.get("name", "")} {item.get("surname", "")}, {item.get("address", "")}' 
            + (" [–û—Ç–º–µ–Ω–∞]" if item.get("status") == "–æ—Ç–º–µ–Ω–µ–Ω–æ" else "")
            for item in data["schedule"]
        ])
        await callback.message.answer(f"üìÖ –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n{text}")
    await callback.answer()

@dp.callback_query(F.data == "add_record")
async def add_record(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    handler = get_save_record_handler(user_id)
    dp.message.register(handler, F.from_user.id == user_id)
    await callback.message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏ –¥–∞—Ç—É, –≤—Ä–µ–º—è, –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –∞–¥—Ä–µ—Å (–ø—Ä–∏–º–µ—Ä: 12.10.2025, 14:00, –ò–≤–∞–Ω, –ò–≤–∞–Ω–æ–≤, —É–ª. –õ–µ–Ω–∏–Ω–∞ 5):"
    )
    await callback.answer()

async def save_record_logic(message: types.Message, user_id):
    await unregister_save_record(user_id)
    data = load_data()
    try:
        parts = [s.strip() for s in message.text.split(',', 4)]
        if len(parts) != 5:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
        date_s, time_s, name, surname, address = parts
        count = len(get_user_week_records(data["schedule"], user_id))
        if count >= 2:
            await message.answer("‚ùå –ó–∞ –æ–¥–Ω—É –Ω–µ–¥–µ–ª—é –Ω–µ–ª—å–∑—è –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –±–æ–ª–µ–µ 2 —Ä–∞–∑.")
            return
        data["schedule"].append({
            "date": date_s,
            "time": time_s,
            "name": name,
            "surname": surname,
            "address": address,
            "user_id": user_id
        })
        save_data(data)
        await message.answer("‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!")
    except Exception:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ –ø—Ä–∏–º–µ—Ä—É.")

@dp.message(Command("cancel"))
async def cancel(message: types.Message):
    data = load_data()
    try:
        parts = message.text.split(' ', 4)
        if len(parts) != 5:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
        _, date_s, time_s, name, surname = parts
        found = None
        for item in data["schedule"]:
            if (
                item["date"] == date_s
                and item["time"] == time_s
                and item["name"] == name
                and item["surname"] == surname
            ):
                found = item
                break
        if not found:
            await message.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        user_id = found.get("user_id")
        if user_id is not None:
            try:
                await bot.send_message(
                    user_id,
                    "‚ö†Ô∏è –ó–∞–Ω—è—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º –≤ —Å–≤—è–∑–∏ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å—é."
                )
            except Exception as e:
                logging.error(f"Could not send cancellation message to user {user_id}: {e}")
        found["status"] = "–æ—Ç–º–µ–Ω–µ–Ω–æ"
        save_data(data)
        await message.answer("‚õî –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—á–µ–Ω–∏–∫—É. –°–ª–æ—Ç –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∑–∞–Ω—è—Ç—ã–º.")
    except Exception:
        await message.answer("‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü—Ä–∏–º–µ—Ä: /cancel 12.10.2025 14:00 –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
