import asyncio
import json
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

TOKEN = "7818982442:AAGY-DDMsuvhLg0-Ec1ds43SkAmCltR88cI"
YOUR_TELEGRAM_ID = 487289287
DATA_FILE = "data.json"
TELEGRAM_LINK = "https://t.me/sv010ch"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
user_context = {}

def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {"schedule": []}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_workdays(count=10):
    weekdays_ru = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞"]
    today = datetime.today()
    days = []
    current = today
    while len(days) < count:
        if current.weekday() < 5:
            days.append((weekdays_ru[current.weekday()], current.strftime("%d.%m.%Y")))
        current += timedelta(days=1)
    return days

def get_times():
    return ["08:00", "09:20", "10:40", "12:50", "14:10", "15:30"]

def safe_datetime(date_s, time_s):
    try:
        return datetime.strptime(f"{date_s} {time_s}", "%d.%m.%Y %H:%M")
    except Exception:
        # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–æ—á–Ω–æ–µ –≤—Ä–µ–º—è ('09' ‚Üí '09:00')
        if len(time_s) == 2 and time_s.isdigit():
            try:
                return datetime.strptime(f"{date_s} {time_s}:00", "%d.%m.%Y %H:%M")
            except Exception:
                return None
        return None

@dp.message(Command("start"))
async def start(message: types.Message):
    buttons = [
        [InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="view_schedule")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="add_record")],
        [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É", url=TELEGRAM_LINK)]
    ]
    if message.from_user.id == YOUR_TELEGRAM_ID:
        buttons.insert(0, [InlineKeyboardButton(text="üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∞–≤—Ç–æ–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞. –ú–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ.", reply_markup=keyboard)

@dp.callback_query(F.data == "add_record")
async def add_record(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_context[user_id] = {}
    data = load_data()
    builder = InlineKeyboardBuilder()
    for day_name, day_date in get_workdays(7):
        busy = any(item["date"] == day_date and item["user_id"] == user_id and item.get("status") != "–æ—Ç–º–µ–Ω–µ–Ω–æ"
                   for item in data["schedule"])
        text = f"üö´ {day_name}, {day_date}" if busy else f"{day_name}, {day_date}"
        cdata = "user_busy_day" if busy else f"select_day:{day_date}"
        builder.button(text=text, callback_data=cdata)
    builder.adjust(1)
    await callback.message.answer("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=builder.as_markup())
    await callback.answer()

@dp.callback_query(F.data == "user_busy_day")
async def user_busy_day(callback: types.CallbackQuery):
    await callback.message.answer("–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –≤—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã! –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å.")
    await callback.answer()

@dp.callback_query(F.data.startswith("select_day:"))
async def select_time(callback: types.CallbackQuery):
    day_date = callback.data.split(":")[1]
    user_id = callback.from_user.id
    user_context[user_id]["date"] = day_date
    data = load_data()
    builder = InlineKeyboardBuilder()
    for t in get_times():
        busy = any(item["date"] == day_date and item["time"] == t and item.get("status") != "–æ—Ç–º–µ–Ω–µ–Ω–æ"
                   for item in data["schedule"])
        text = f"‚ùå {t}" if busy else t
        cdata = "busy" if busy else f"select_time:{t}"
        builder.button(text=text, callback_data=cdata)
    builder.adjust(3)
    await callback.message.answer(f"üïí –î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞: {day_date}\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è:", reply_markup=builder.as_markup())
    await callback.answer()

@dp.callback_query(F.data == "busy")
async def busy_time(callback: types.CallbackQuery):
    await callback.message.answer("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ.")
    await callback.answer()

@dp.callback_query(F.data.startswith("select_time:"))
async def select_time_write_name(callback: types.CallbackQuery):
    selected_time = callback.data.split(":")[1].strip()   # –¥–æ–±–∞–≤–ª–µ–Ω–æ .strip()
    user_id = callback.from_user.id
    if selected_time not in get_times():
        await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –û–±–Ω–æ–≤–∏—Ç–µ –º–µ–Ω—é!")
        return
    user_context[user_id]["time"] = selected_time
    await callback.message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω)")
    await callback.answer()

@dp.message()
async def process_name_or_address(message: types.Message):
    user_id = message.from_user.id
    ctx = user_context.get(user_id, {})
    if ctx.get("date") and ctx.get("time") and "name" not in ctx:
        parts = message.text.strip().split(" ", 1)
        if len(parts) < 2:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
            return
        ctx["surname"], ctx["name"] = parts[0], parts[1]
        user_context[user_id] = ctx
        await message.answer("üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, –∫—É–¥–∞ –ø–æ–¥—ä–µ—Ö–∞—Ç—å:")
        return
    if ctx.get("date") and ctx.get("time") and ctx.get("name") and "address" not in ctx:
        ctx["address"] = message.text.strip()
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏!
        if ctx["time"].strip() not in get_times():
            await message.answer("–û—à–∏–±–∫–∞! –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return
        data = load_data()
        data["schedule"].append({
            "date": ctx["date"],
            "time": ctx["time"].strip(),
            "name": ctx["name"],
            "surname": ctx["surname"],
            "address": ctx["address"],
            "user_id": user_id
        })
        save_data(data)
        await message.answer(f"‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {ctx['date']} {ctx['time'].strip()} {ctx['surname']} {ctx['name']}, {ctx['address']}")
        user_context.pop(user_id, None)
        return

@dp.callback_query(F.data == "view_schedule")
async def view_schedule(callback: types.CallbackQuery):
    data = load_data()
    now = datetime.now()
    my_id = callback.from_user.id
    my_records = [
        item for item in data["schedule"]
        if item.get("user_id") == my_id and item.get("status") != "–æ—Ç–º–µ–Ω–µ–Ω–æ"
           and safe_datetime(item['date'], item['time']) and safe_datetime(item['date'], item['time']) > now
    ]
    my_records.sort(key=lambda item: safe_datetime(item['date'], item['time']) or datetime.max)
    text = ""
    for idx, item in enumerate(my_records):
        text += f"üü¢ –ú–æ—è –∑–∞–ø–∏—Å—å {idx+1}:\n–î–∞—Ç–∞: {item['date']}\n–í—Ä–µ–º—è: {item['time']}\n–ê–¥—Ä–µ—Å: {item['address']}\n"
    if not text:
        text = "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    await callback.message.answer(text)
    await callback.answer()

@dp.callback_query(F.data == "admin_panel")
async def admin_panel(callback: types.CallbackQuery):
    if callback.from_user.id != YOUR_TELEGRAM_ID:
        await callback.message.answer('‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!')
        await callback.answer()
        return
    data = load_data()
    now = datetime.now()
    upcoming_days = sorted(set(
        item["date"]
        for item in data["schedule"]
        if safe_datetime(item["date"], item["time"]) and safe_datetime(item["date"], item["time"]) > now
    ))
    builder = InlineKeyboardBuilder()
    text = "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è–º–∏:</b>\n\n"
    for day in upcoming_days:
        builder.button(text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–Ω—å {day}", callback_data=f"admin_cancel_day:{day}")
        builder.button(text=f"üëâ –°–ª–æ—Ç—ã {day}", callback_data=f"admin_slots:{day}")
    builder.adjust(2)
    await callback.message.answer(text, reply_markup=builder.as_markup())
    await callback.answer()

@dp.callback_query(F.data.startswith("admin_slots:"))
async def admin_slots(callback: types.CallbackQuery):
    day = callback.data.split(":")[1]
    data = load_data()
    slots = [item for item in data["schedule"] if item["date"] == day and item.get("status") != "–æ—Ç–º–µ–Ω–µ–Ω–æ"]
    builder = InlineKeyboardBuilder()
    text = f"–°–ª–æ—Ç—ã –Ω–∞ {day}:\n"
    for idx, slot in enumerate(slots, 1):
        cancel_id = slot["user_id"]
        slot_time = slot["time"]
        slot_text = f"{slot_time}: {slot.get('surname','')} {slot.get('name','')} {slot.get('address','')}"
        text += f"{idx}. {slot_text}\n"
        builder.button(text=f"‚ùå+{slot_time}", callback_data=f"admin_cancel_slot:{day}:{slot_time}:{cancel_id}:free")
        builder.button(text=f"‚õî{slot_time}", callback_data=f"admin_cancel_slot:{day}:{slot_time}:{cancel_id}:nofree")
    builder.adjust(2)
    await callback.message.answer(text, reply_markup=builder.as_markup())
    await callback.answer()

@dp.callback_query(F.data.startswith("admin_cancel_slot:"))
async def admin_cancel_slot(callback: types.CallbackQuery):
    _, day, slot_time, cancel_id, cancel_type = callback.data.split(":")
    slot_time = slot_time.strip()
    data = load_data()
    slot = next((item for item in data["schedule"] if item["date"] == day and item["time"].strip() == slot_time and str(item["user_id"]) == cancel_id and item.get("status") != "–æ—Ç–º–µ–Ω–µ–Ω–æ"), None)
    if not slot:
        await callback.message.answer("–°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    slot["status"] = "–æ—Ç–º–µ–Ω–µ–Ω–æ"
    save_data(data)
    try:
        if cancel_type == "free":
            await bot.send_message(int(cancel_id), f"‚õî –í–∞—à–µ –∑–∞–Ω—è—Ç–∏–µ {day} {slot_time} –æ—Ç–º–µ–Ω–µ–Ω–æ, —Å–ª–æ—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω –¥–ª—è –¥—Ä—É–≥–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤.")
            await callback.message.answer("–°–ª–æ—Ç –æ—Ç–º–µ–Ω—ë–Ω –∏ –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω (—Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥—Ä—É–≥–∏–º).")
        else:
            await bot.send_message(int(cancel_id), f"‚ö†Ô∏è –í–∞—à–µ –∑–∞–Ω—è—Ç–∏–µ {day} {slot_time} –æ—Ç–º–µ–Ω–µ–Ω–æ. –°–ª–æ—Ç –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç—ã–º.")
            await callback.message.answer("–°–ª–æ—Ç –æ—Ç–º–µ–Ω—ë–Ω, –Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –Ω–µ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è.")
    except Exception:
        pass
    await callback.answer()

@dp.callback_query(F.data.startswith("admin_cancel_day:"))
async def admin_cancel_day(callback: types.CallbackQuery):
    _, day = callback.data.split(":")
    data = load_data()
    day_slots = [item for item in data["schedule"] if item["date"] == day and item.get("status") != "–æ—Ç–º–µ–Ω–µ–Ω–æ"]
    for slot in day_slots:
        slot["status"] = "–æ—Ç–º–µ–Ω–µ–Ω–æ"
        try:
            await bot.send_message(int(slot["user_id"]), f"‚õî –ó–∞–Ω—è—Ç–∏–µ –Ω–∞ {day} {slot['time']} –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è –≤ —Å–≤—è–∑–∏ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å—é.")
        except Exception:
            pass
    save_data(data)
    await callback.message.answer(f"‚ùå –í—Å–µ –∑–∞–Ω—è—Ç–∏—è –Ω–∞ {day} –æ—Ç–º–µ–Ω–µ–Ω—ã –∏ –¥–µ–Ω—å –∑–∞–∫—Ä—ã—Ç. –£—á–µ–Ω–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.")
    await callback.answer()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
