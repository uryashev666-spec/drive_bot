import asyncio
import json
import logging
from datetime import datetime, date, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

TOKEN = "7818982442:AAGY-DDMsuvhLg0-Ec1ds43SkAmCltR88cI"
DATA_FILE = "data.json"
TELEGRAM_LINK = "https://t.me/sv010ch"
YOUR_TELEGRAM_ID = 487289287

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
user_context = {}
all_users = set()

class Booking(StatesGroup):
    waiting_for_name = State()
    waiting_for_address = State()

def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {"schedule": []}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_user_week_records(schedule, user_id):
    now = datetime.now()
    return [
        item for item in schedule if item.get("user_id") == user_id
            and 0 <= (now - datetime.strptime(item.get("date"), "%d.%m.%Y")).days < 7
    ]

def get_workdays(count=10):
    weekdays_ru = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞"]
    now = datetime.now()
    today = date.today()
    days = []
    current = today
    # –ü–æ—Å–ª–µ 15:20 —Å–µ–≥–æ–¥–Ω—è –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å!
    skip_today = (now.hour > 15) or (now.hour == 15 and now.minute >= 20)
    added = 0
    while added < count:
        if current.weekday() < 5:
            # –µ—Å–ª–∏ —ç—Ç–æ —Å–µ–≥–æ–¥–Ω—è –∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            if skip_today and current == today:
                current += timedelta(days=1)
                skip_today = False
                continue
            day_name = weekdays_ru[current.weekday()]
            days.append((day_name, current.strftime("%d.%m.%Y")))
            added += 1
        current += timedelta(days=1)
    return days

@dp.message(Command("start"))
async def start(message: types.Message):
    all_users.add(message.from_user.id)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="view_schedule")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="add_record")],
            [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É", url=TELEGRAM_LINK)]
        ]
    )
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∞–≤—Ç–æ–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ.",
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "view_schedule")
async def view_schedule(callback: types.CallbackQuery):
    data = load_data()
    if not data["schedule"]:
        await callback.message.answer("üì≠ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –ø—É—Å—Ç–æ–µ.")
    else:
        text = "\n".join([
            f'‚Ä¢ {item["date"]}, {item["time"]}, {item.get("name", "")} {item.get("surname", "")}, {item.get("address", "")}'
            + (" [–û—Ç–º–µ–Ω–∞]" if item.get("status") == "–æ—Ç–º–µ–Ω–µ–Ω–æ" else "")
            for item in data["schedule"]
        ])
        await callback.message.answer(f"üìÖ –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n{text}")
    await callback.answer()

@dp.callback_query(F.data == "add_record")
async def add_record(callback: types.CallbackQuery):
    days = get_workdays(10)
    data = load_data()
    times_list = ["8:00", "9:20", "10:40", "12:50", "14:10", "15:30"]
    builder = InlineKeyboardBuilder()
    for day_name, d in days:
        busy_count = 0
        for t in times_list:
            busy = any(item["date"] == d and item["time"] == t and item.get("status") != "–æ—Ç–º–µ–Ω–µ–Ω–æ" for item in data["schedule"])
            if busy:
                busy_count += 1
        if busy_count == len(times_list):
            # –í—Å–µ —Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã ‚Äî –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å
            builder.button(text=f"‚ùå {day_name}, {d}", callback_data="busy_day")
        else:
            # –ï—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è ‚Äî –æ–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–Ω—è
            builder.button(text=f"{day_name}, {d}", callback_data=f"select_day:{d}")
    builder.adjust(1)
    await callback.message.answer("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏—è:", reply_markup=builder.as_markup())
    await callback.answer()

@dp.callback_query(F.data.startswith("select_day:"))
async def select_day(callback: types.CallbackQuery):
    selected_date = callback.data.split(":", 1)[1]
    user_id = callback.from_user.id
    all_users.add(user_id)
    user_context[user_id] = {"date": selected_date}
    times_list = ["8:00", "9:20", "10:40", "12:50", "14:10", "15:30"]
    data = load_data()
    builder = InlineKeyboardBuilder()
    for t in times_list:
        busy = any(
            item["date"] == selected_date and item["time"] == t and item.get("status") != "–æ—Ç–º–µ–Ω–µ–Ω–æ"
            for item in data["schedule"])
        if busy:
            builder.button(text=f"‚ùå {t}", callback_data="busy")
        else:
            builder.button(text=t, callback_data=f"select_time:{t}")
    builder.adjust(3)
    await callback.message.answer(
        f"üïí –î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞: {selected_date}\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("select_time:"))
async def select_time(callback: types.CallbackQuery, state: FSMContext):
    selected_time = callback.data.split(":", 1)[1]
    user_id = callback.from_user.id
    user_context[user_id] = user_context.get(user_id, {})
    user_context[user_id]["time"] = selected_time
    await callback.message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤)")
    await state.set_state(Booking.waiting_for_name)
    await callback.answer()

@dp.message(Booking.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    parts = message.text.strip().split()
    if len(parts) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
        return
    user_context[user_id]["name"] = parts[0]
    user_context[user_id]["surname"] = " ".join(parts[1:])
    await message.answer("üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, –∫—É–¥–∞ –ø–æ–¥—ä–µ—Ö–∞—Ç—å:")
    await state.set_state(Booking.waiting_for_address)

@dp.message(Booking.waiting_for_address)
async def process_address(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_context[user_id]["address"] = message.text.strip()
    uc = user_context[user_id]
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="confirm_entry")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ", callback_data="user_cancel")
    await message.answer(
        f"üü¢ –í–∞—à–∞ –∑–∞–ø–∏—Å—å:\n"
        f"–ò–º—è: {uc['name']}\n"
        f"–§–∞–º–∏–ª–∏—è: {uc['surname']}\n"
        f"–ê–¥—Ä–µ—Å: {uc['address']}\n"
        f"–î–∞—Ç–∞: {uc['date']}\n"
        f"–í—Ä–µ–º—è: {uc['time']}\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        reply_markup=builder.as_markup()
    )
    await state.clear()

async def remind_later(user_id, date_s, time_s, address):
    dt = datetime.strptime(f"{date_s} {time_s}", "%d.%m.%Y %H:%M")
    delay = (dt - timedelta(minutes=20) - datetime.now()).total_seconds()
    if delay > 0:
        await asyncio.sleep(delay)
        msg = (
            f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n"
            f"–ó–∞–Ω—è—Ç–∏–µ —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç.\n"
            f"–î–∞—Ç–∞: {date_s}\n"
            f"–í—Ä–µ–º—è: {time_s}\n"
            f"–ê–¥—Ä–µ—Å: {address}"
        )
        try:
            await bot.send_message(user_id, msg)
        except Exception:
            pass

@dp.callback_query(F.data == "confirm_entry")
async def confirm_entry(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_data = user_context.get(user_id)
    data = load_data()
    if not user_data:
        await callback.message.answer("–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å –∑–∞–Ω–æ–≤–æ.")
        await callback.answer()
        return

    date_s = user_data["date"]
    time_s = user_data["time"]
    name = user_data["name"]
    surname = user_data["surname"]
    address = user_data["address"]
    count = len(get_user_week_records(data["schedule"], user_id))

    if count >= 3:
        await callback.message.answer("‚ùå –ó–∞ –æ–¥–Ω—É –Ω–µ–¥–µ–ª—é –Ω–µ–ª—å–∑—è –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –±–æ–ª–µ–µ 3 —Ä–∞–∑.")
        await callback.answer()
        return
    for item in data["schedule"]:
        if item["date"] == date_s and item["time"] == time_s and item.get("status") != "–æ—Ç–º–µ–Ω–µ–Ω–æ":
            await callback.message.answer("‚ùå –≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç.")
            await callback.answer()
            return

    data["schedule"].append({
        "date": date_s,
        "time": time_s,
        "name": name,
        "surname": surname,
        "address": address,
        "user_id": user_id
    })
    save_data(data)

    card_text = (
        f"üü¢ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!\n\n"
        f"–ò–º—è: {name}\n"
        f"–§–∞–º–∏–ª–∏—è: {surname}\n"
        f"–ê–¥—Ä–µ—Å: {address}\n"
        f"–î–∞—Ç–∞: {date_s}\n"
        f"–í—Ä–µ–º—è: {time_s}"
    )
    await bot.send_message(YOUR_TELEGRAM_ID, card_text)
    msg_user = (
        f"‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ!\n"
        f"–î–∞—Ç–∞: {date_s}\n"
        f"–í—Ä–µ–º—è: {time_s}\n"
        f"–ê–¥—Ä–µ—Å: {address}"
    )
    await bot.send_message(user_id, msg_user)
    asyncio.create_task(remind_later(user_id, date_s, time_s, address))
    user_context.pop(user_id, None)
    await callback.answer()

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="view_schedule")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="add_record")],
            [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É", url=TELEGRAM_LINK)]
        ]
    )
    await callback.message.answer("‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard)

@dp.callback_query(F.data == "user_cancel")
async def user_cancel(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    data = load_data()
    date_s = user_context[user_id]["date"]
    time_s = user_context[user_id]["time"]
    now = datetime.now()
    dt_slot = datetime.strptime(f"{date_s} {time_s}", "%d.%m.%Y %H:%M")
    hours_left = (dt_slot - now).total_seconds() / 3600
    found = next((item for item in data["schedule"] if
                  item["date"] == date_s and item["time"] == time_s and item["user_id"] == user_id and item.get("status") != "–æ—Ç–º–µ–Ω–µ–Ω–æ"), None)
    if not found:
        await callback.message.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await callback.answer()
        return
    if hours_left < 12:
        await callback.message.answer("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –ø–æ–∑–¥–Ω–æ (–º–µ–Ω—å—à–µ 12 —á–∞—Å–æ–≤). –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º!")
        await callback.answer()
        return

    found["status"] = "–æ—Ç–º–µ–Ω–µ–Ω–æ"
    save_data(data)
    await callback.message.answer("‚úÖ –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞! –î—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–≤–æ–±–æ–¥–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.")
    for uid in all_users:
        if uid != user_id:
            try:
                await bot.send_message(
                    uid,
                    f"üîî –û—Å–≤–æ–±–æ–¥–∏–ª–æ—Å—å –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π!\n–î–∞—Ç–∞: {date_s}\n–í—Ä–µ–º—è: {time_s}\n–ú–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è!"
                )
            except Exception:
                pass
    await callback.answer()

# --- –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∏ –æ—Ç–º–µ–Ω—ã –ø–æ –ª–æ–≥–∏–∫–µ –ø—Ä–æ—à–ª—ã—Ö –≤–µ—Ä—Å–∏–π ---

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
