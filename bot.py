import asyncio
import json
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

TOKEN = "7818982442:AAGY-DDMsuvhLg0-Ec1ds43SkAmCltR88cI"
DATA_FILE = "data.json"
TELEGRAM_LINK = "https://t.me/sv010ch"
YOUR_TELEGRAM_ID = 487289287

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
user_context = {}
students = {}
all_users = set()

def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {"schedule": []}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_workdays(count=7):
    weekdays_ru = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞"]
    today = datetime.today()
    days = []
    current = today
    while len(days) < count:
        if current.weekday() < 5:  # —Ç–æ–ª—å–∫–æ –±—É–¥–Ω–∏
            weekday_name = weekdays_ru[current.weekday()]
            days.append((weekday_name, current.strftime("%d.%m.%Y")))
        current += timedelta(days=1)
    return days

@dp.message(Command("start"))
async def start(message: types.Message):
    all_users.add(message.from_user.id)
    buttons = [
        [InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="view_schedule")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="add_record")],
        [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É", url=TELEGRAM_LINK)]
    ]
    if message.from_user.id == YOUR_TELEGRAM_ID:
        buttons.insert(0, [InlineKeyboardButton(text="üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∞–≤—Ç–æ–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ –∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å.",
        reply_markup=keyboard
    )

# --- –ö–Ω–æ–ø–æ—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏ ---
@dp.callback_query(F.data == "add_record")
async def start_record(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    for day_name, day_date in get_workdays(7):
        builder.button(text=f"{day_name}, {day_date}",
                       callback_data=f"select_day:{day_date}")
    builder.adjust(1)
    await callback.message.answer("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏—è:", reply_markup=builder.as_markup())
    await callback.answer()

@dp.callback_query(F.data.startswith("select_day:"))
async def select_time(callback: types.CallbackQuery):
    day_date = callback.data.split(":")[1]
    user_id = callback.from_user.id
    if user_id not in user_context:
        user_context[user_id] = {}
    user_context[user_id]["date"] = day_date
    builder = InlineKeyboardBuilder()
    times = ["08:00", "09:20", "10:40", "12:50", "14:10", "15:30"]
    for t in times:
        builder.button(text=t, callback_data=f"select_time:{day_date}:{t}")
    builder.adjust(3)
    await callback.message.answer(f"üïí –î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞: {day_date}\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è:", reply_markup=builder.as_markup())
    await callback.answer()

@dp.callback_query(F.data.startswith("select_time:"))
async def input_name_address(callback: types.CallbackQuery):
    _, day_date, time_sel = callback.data.split(":")
    user_id = callback.from_user.id
    if user_id not in user_context:
        user_context[user_id] = {}
    user_context[user_id]["date"] = day_date
    user_context[user_id]["time"] = time_sel
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω, –£–≤–µ–ª—å—Å–∫–∞—è 98):")
    await callback.answer()

@dp.message()
async def save_record(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_context or "date" not in user_context[user_id] or "time" not in user_context[user_id]:
        return  # –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–∏—Å–∏ ‚Äì –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
    inp = message.text.strip().split(",", 1)
    if len(inp) != 2:
        await message.reply("–§–æ—Ä–º–∞—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω! –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
        return
    name_parts = inp[0].strip().split(" ", 1)
    if len(name_parts) != 2:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –∑–∞—Ç–µ–º –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é!")
        return
    surname, name = name_parts
    address = inp[1].strip()
    date_s = user_context[user_id]["date"]
    time_s = user_context[user_id]["time"]
    data = load_data()
    data["schedule"].append({
        "date": date_s,
        "time": time_s,
        "name": name,
        "surname": surname,
        "address": address,
        "user_id": user_id
    })
    save_data(data)
    user_context.pop(user_id, None)
    await message.reply(f"‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {date_s} {time_s} {surname} {name}, {address}")

# --- –ü—Ä–∏–º–µ—Ä –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∞ (–¥–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ –ø–æ–¥ —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏) ---
@dp.callback_query(F.data == "admin_panel")
async def admin_panel_button(callback: types.CallbackQuery):
    data = load_data()
    text = "<b>–í—Å–µ –∑–∞–ø–∏—Å–∏:</b>\n"
    for idx, item in enumerate(data["schedule"], 1):
        text += (f"{idx}. {item['date']} {item['time']} "
                 f"{item.get('surname','')} {item.get('name','')} "
                 f"{item.get('address','')}\n")
    await callback.message.answer(text)
    await callback.answer()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
